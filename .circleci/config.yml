version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:

    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
  build:
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
      - image: cirrusci/flutter:stable
    working_directory: ~/app
    steps:
      # Checkout the code as the first step.
      - checkout

      - run:
          name: Install dependencies
          command: flutter pub get

      - run:
          name: Decode Keystore
          command: echo $KEYSTORE_BASE64 | base64 --decode > android/app/my-release-key.jks

      - run:
          name: Create key.properties
          command: |
            echo "storePassword=$KEYSTORE_PASSWORD" > key.properties
            echo "keyPassword=$KEY_PASSWORD" >> key.properties
            echo "keyAlias=$KEY_ALIAS" >> key.properties
            echo "storeFile=my-release-key.jks" >> key.properties

      - run:
          name: Build Signed APK
          command: flutter build apk --release

      - run:
          name: Build Signed AAB
          command: flutter build appbundle --release

      - store_artifacts:
          path: build/app/outputs/flutter-apk/app-release.apk
          destination: app-release.apk

      - store_artifacts:
          path: build/app/outputs/bundle/release/app-release.aab
          destination: app-release.aab

      - run:
          name: Install jq for JSON parsing
          name: Upload APK & AAB to Cloudinary
          command: |
            # Upload APK
            RESPONSE_APK=$(curl -s -X POST https://api.cloudinary.com/v1_1/<dvwxbfzhi>/raw/upload \
              -F file=@build/app/outputs/flutter-apk/app-release.apk \
              -F upload_preset=unsigned_upload)

            APK_URL=$(echo $RESPONSE_APK | jq -r '.secure_url')
            echo "APK URL: $APK_URL"

            # Upload AAB
            RESPONSE_AAB=$(curl -s -X POST https://api.cloudinary.com/v1_1/<dvwxbfzhi>/raw/upload \
              -F file=@build/app/outputs/bundle/release/app-release.aab \
              -F upload_preset=unsigned_upload)

            AAB_URL=$(echo $RESPONSE_AAB | jq -r '.secure_url')
            echo "AAB URL: $AAB_URL"

            # # Optional: Notify server
            # curl -X POST https://yourserver.com/api/build-complete \
            #  -H "Content-Type: application/json" \
            #  -d "{\"apk_url\":\"$APK_URL\", \"aab_url\":\"$AAB_URL\", \"build_id\":\"$CIRCLE_WORKFLOW_ID\"}"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
  build_and_upload:
    jobs:
    
      - build